pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def backendChanged = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0

                        if (!backendChanged) {
                            echo "No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No changes in backend/")
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "Building image ${IMAGE_NAME}:${TAG}"
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml"
                        def newImage = "${IMAGE_NAME}:${TAG}"
                        echo "Updating ${filePath} with new image: ${newImage}"
                        sh "sed -i 's|image:.*|image: ${newImage}|' ${filePath}"
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml
                                if ! git diff --cached --quiet; then
                                    git commit -m "Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo "Checking backend health..."
                    def maxAttempts = 15
                    def waitTime = 10
                    def healthy = false

                    for (int i = 1; i <= maxAttempts; i++) {
                        echo "Attempt ${i}/${maxAttempts}: Curling http://gogo-backend:5000/health..."
                        def healthCheckStatus = sh(
                            script: "curl -s http://gogo-backend:5000/health | grep -q '\"status\":\"healthy\"'",
                            returnStatus: true
                        )
                        if (healthCheckStatus == 0) {
                            echo "Backend is healthy on attempt ${i}!"
                            healthy = true
                            break
                        } else {
                            echo "Backend not yet healthy."
                            if (i < maxAttempts) {
                                sleep waitTime
                            }
                        }
                    }

                    if (!healthy) {
                        error "Backend health check failed after ${maxAttempts} attempts!"
                    }
                }
            }
        }

        stage('DR Failover & Sync') {
            steps {
                script {
                    env.DR_FRONTEND_STATUS = "UNKNOWN"
                    env.DR_BACKEND_STATUS = "UNKNOWN"
                    env.DR_DATA_SYNC_STATUS = "UNKNOWN"
                    env.DR_TEST_RESULT = "FAILURE"

                    echo "Attempting to seed Main Backend (5001) and DR Backend (5002) from Kubernetes backend (5000)..."
                    def mainBackendSeedSuccess = sh(
                        script: 'docker exec gogo-backend python /app/seed.py || true',
                        returnStatus: true
                    )
                    def drBackendInitialSeedSuccess = sh(
                        script: 'docker exec gogo-dr-backend python /app/seed.py || true',
                        returnStatus: true
                    )

                    if (mainBackendSeedSuccess == 0 && drBackendInitialSeedSuccess == 0) {
                        env.DR_DATA_SYNC_STATUS = "Main & DR Backends Seeded"
                    } else if (mainBackendSeedSuccess != 0 && drBackendInitialSeedSuccess == 0) {
                        env.DR_DATA_SYNC_STATUS = "Main Backend Seed Failed or Not Running, DR Seeded"
                    } else if (mainBackendSeedSuccess == 0 && drBackendInitialSeedSuccess != 0) {
                        env.DR_DATA_SYNC_STATUS = "Main Backend Seeded, DR Seed Failed"
                    } else {
                        env.DR_DATA_SYNC_STATUS = "Both Main & DR Backend Seeds Failed or Not Running"
                    }

                    echo "Checking if Main Frontend container (gogo-main-frontend) is running..."
                    def frontendRunning = sh(
                        script: "docker ps --filter 'name=gogo-main-frontend' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()

                    if (frontendRunning == 'gogo-main-frontend') {
                        echo "Main Frontend container (gogo-main-frontend) is running. Ensuring DR Frontend is stopped."
                        echo "Stopping DR Frontend (gogo-dr-frontend)..."
                        sh "docker stop gogo-dr-frontend || true"
                        echo "Main Frontend (3000) is active."
                        env.DR_FRONTEND_STATUS = "Main Active"
                    } else {
                        echo "Main Frontend container (gogo-main-frontend) is NOT running. Activating DR Frontend (gogo-dr-frontend) (on 3002)."
                        echo "Stopping Main Frontend (gogo-main-frontend)..."
                        sh "docker stop gogo-main-frontend || true"
                        echo "Starting DR Frontend (gogo-dr-frontend)..."
                        sh "docker start gogo-dr-frontend"
                        def drFrontendHealthy = sh(
                            script: "curl -s http://localhost:3002 || true",
                            returnStatus: true
                        )
                        if (drFrontendHealthy == 0) {
                            echo "DR Frontend is healthy on 3002!"
                            env.DR_FRONTEND_STATUS = "DR Activated & Healthy (3002)"
                        } else {
                            echo "DR Frontend activated but Health Check Failed (3002)"
                            env.DR_FRONTEND_STATUS = "DR Activated but Health Check Failed (3002)"
                        }
                    }

                    echo "Checking if Main Backend container (gogo-backend) is running..."
                    def backendRunning = sh(
                        script: "docker ps --filter 'name=gogo-backend' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim()

                    if (backendRunning == 'gogo-backend') {
                        echo "Main Backend container (gogo-backend) is running. Ensuring DR Backend is stopped."
                        echo "Stopping DR Backend (gogo-dr-backend)..."
                        sh "docker stop gogo-dr-backend || true"
                        env.DR_BACKEND_STATUS = "Main Active"
                    } else {
                        echo "Main Backend container (gogo-backend) is NOT running. Activating DR Backend (gogo-dr-backend) (on 5002) and seeding data."
                        echo "Stopping Main Backend (gogo-backend)..."
                        sh "docker stop gogo-backend || true"
                        echo "Starting DR Backend (gogo-dr-backend)..."
                        sh "docker start gogo-dr-backend"
                        echo "Running seed.py inside DR Backend container (gogo-dr-backend) to sync data from Kubernetes backend (5000)..."
                        def drBackendSeedOnFailoverSuccess = sh(
                            script: 'docker exec gogo-dr-backend python /app/seed.py',
                            returnStatus: true
                        )
                        if (drBackendSeedOnFailoverSuccess == 0) {
                            def drBackendHealthy = sh(
                                script: "curl -s http://localhost:5002/health | grep -q '\"status\":\"healthy\"'",
                                returnStatus: true
                            )
                            if (drBackendHealthy == 0) {
                                echo "DR Backend is healthy on 5002!"
                                env.DR_BACKEND_STATUS = "DR Activated & Healthy (5002)"
                                env.DR_DATA_SYNC_STATUS = "DR Backend Seeded Successfully"
                            } else {
                                echo "DR Backend activated but Health Check Failed (5002)"
                                env.DR_BACKEND_STATUS = "DR Activated but Health Check Failed (5002)"
                                env.DR_DATA_SYNC_STATUS = "DR Backend Seeded but Health Check Failed"
                            }
                        } else {
                             echo "DR Backend activated but Seed Failed (5002)"
                             env.DR_BACKEND_STATUS = "DR Activated but Seed Failed (5002)"
                             env.DR_DATA_SYNC_STATUS = "DR Backend Seed Failed"
                        }
                    }

                    if (((env.DR_FRONTEND_STATUS == "Main Active" || env.DR_FRONTEND_STATUS == "DR Activated & Healthy (3002)")) &&
                        ((env.DR_BACKEND_STATUS == "Main Active" || env.DR_BACKEND_STATUS == "DR Activated & Healthy (5002)")) &&
                        (env.DR_DATA_SYNC_STATUS.contains("Seeded"))) {
                        env.DR_TEST_RESULT = "SUCCESS"
                    } else {
                        env.DR_TEST_RESULT = "FAILURE"
                    }
                }
            }
        }

        stage('Generate DR Readiness Reports') {
            steps {
                script {
                    echo "--- DR Readiness Report ---"
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "Build URL: ${env.BUILD_URL}"
                    echo "Timestamp: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                    echo "---------------------------"
                    echo "DR Test Result: **${env.DR_TEST_RESULT}**"
                    echo "DR Frontend Status: ${env.DR_FRONTEND_STATUS}"
                    echo "DR Backend Status: ${env.DR_BACKEND_STATUS}"
                    echo "DR Data Sync Status: ${env.DR_DATA_SYNC_STATUS}"
                    echo "---------------------------"

                    def reportContent = """
                        DR Readiness Report
                        -------------------
                        Build Number: ${env.BUILD_NUMBER}
                        Build URL: ${env.BUILD_URL}
                        Timestamp: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                        -------------------
                        DR Test Result: ${env.DR_TEST_RESULT}
                        DR Frontend Status: ${env.DR_FRONTEND_STATUS}
                        DR Backend Status: ${env.DR_BACKEND_STATUS}
                        DR Data Sync Status: ${env.DR_DATA_SYNC_STATUS}
                        -------------------
                    """.stripIndent()

                    writeFile file: 'dr-readiness-report.txt', text: reportContent
                    archiveArtifacts artifacts: 'dr-readiness-report.txt', fingerprint: true

                    withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                        def slackMessage = ""
                        if (env.DR_TEST_RESULT == "SUCCESS") {
                            slackMessage = "DR Readiness Test Passed!\\nBuild: <${env.BUILD_URL}|#${env.BUILD_NUMBER}>\\nFrontend: ${env.DR_FRONTEND_STATUS}\\nBackend: ${env.DR_BACKEND_STATUS}\\nData Sync: ${env.DR_DATA_SYNC_STATUS}"
                        } else {
                            slackMessage = "DR Readiness Test FAILED!\\nBuild: <${env.BUILD_URL}|#${env.BUILD_NUMBER}>\\nFrontend: ${env.DR_FRONTEND_STATUS}\\nBackend: ${env.DR_BACKEND_STATUS}\\nData Sync: ${env.DR_DATA_SYNC_STATUS}\\nCheck logs for details."
                        }

                        sh """
                            curl -X POST -H 'Content-type: application/json' \
                            --data '{"text": "${slackMessage}"}' $SLACK_WEBHOOK
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Backend image pushed and deployment updated."
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "Backend CI/CD succeeded — ${TAG} deployed & healthy!"}' $SLACK_WEBHOOK
                """
            }
        }

        aborted {
            echo "Pipeline aborted (no backend changes)"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "Backend pipeline aborted — no changes detected."}' $SLACK_WEBHOOK
                """
            }
        }

        failure {
            echo "Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "Backend pipeline failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}