pipeline {
    agent any

    environment {
        IMAGE_NAME = 'rani19/backend'
        TAG = "build-${env.BUILD_NUMBER}"
        DEV_REPO_URL = 'https://github.com/RaniSaed/smart-retail-dev.git'
        CONFIG_REPO_URL = 'https://github.com/RaniSaed/smart-retail-config.git'
        DOCKER_CREDENTIALS_ID = 'docker-hub-creds'
        SLACK_CREDENTIAL_ID = 'slack-webhook'
        // Define default backend service names/ports. These will be updated dynamically.
        ACTIVE_FRONTEND_NAME = "UNKNOWN"
        ACTIVE_FRONTEND_PORT = "UNKNOWN"
        ACTIVE_BACKEND_NAME = "UNKNOWN"
        ACTIVE_BACKEND_PORT = "UNKNOWN"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('üì• Clone Dev Repo') {
            steps {
                dir('dev') {
                    git url: "${DEV_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üìÅ Clone Config Repo') {
            steps {
                dir('config') {
                    git url: "${CONFIG_REPO_URL}", branch: 'main'
                }
            }
        }

        stage('üïµÔ∏è Check Backend Changes') {
            steps {
                dir('dev') {
                    script {
                        def backendChanged = sh(
                            script: "git diff --name-only HEAD~1 HEAD | grep -q '^backend/'",
                            returnStatus: true
                        ) == 0

                        if (!backendChanged) {
                            echo "‚ö†Ô∏è No changes in backend code. Aborting..."
                            currentBuild.result = 'ABORTED'
                            error("No changes in backend/")
                        }
                    }
                }
            }
        }

        stage('üê≥ Build Docker Image') {
            steps {
                dir('dev') {
                    script {
                        echo "üì¶ Building image ${IMAGE_NAME}:${TAG}"
                        docker.build("${IMAGE_NAME}:${TAG}", "-f backend/Dockerfile backend")
                    }
                }
            }
        }

        stage('üöÄ Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        docker.withRegistry("https://index.docker.io/v1/", "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}:${TAG}").push()
                            docker.image("${IMAGE_NAME}:${TAG}").push("latest")
                        }
                    }
                }
            }
        }

        stage('‚úèÔ∏è Update Deployment YAML') {
            steps {
                dir('config') {
                    script {
                        def filePath = "k8s/backend/deployment.yaml"
                        def newImage = "${IMAGE_NAME}:${TAG}"
                        echo "üîß Updating ${filePath} with new image: ${newImage}"
                        sh "sed -i 's|image:.*|image: ${newImage}|' ${filePath}"
                        sh "cat ${filePath}"
                    }
                }
            }
        }

        stage('üì§ Commit & Push Changes') {
            steps {
                dir('config') {
                    withCredentials([string(credentialsId: 'github-push-token', variable: 'GIT_TOKEN')]) {
                        script {
                            sh """
                                git config user.email "rani.saed19@gmail.com"
                                git config user.name "Rani Saed (CI/CD)"
                                git add k8s/backend/deployment.yaml
                                if ! git diff --cached --quiet; then
                                    git commit -m "üöÄ Update backend image to ${TAG}"
                                    git remote set-url origin https://${GIT_TOKEN}@github.com/RaniSaed/smart-retail-config.git
                                    git push origin main
                                else
                                    echo "No changes to commit"
                                fi
                            """
                        }
                    }
                }
            }
        }

        stage('‚ù§Ô∏è Health Check (K8s Backend)') {
            steps {
                script {
                    echo "üîç Checking Kubernetes backend health (gogo-backend:5000)..."
                    def maxAttempts = 15
                    def waitTime = 10
                    def healthy = false

                    for (int i = 1; i <= maxAttempts; i++) {
                        echo "Attempt ${i}/${maxAttempts}: Curling http://gogo-backend:5000/health..."
                        def healthCheckStatus = sh(
                            script: "curl -s http://gogo-backend:5000/health | grep -q '\"status\":\"healthy\"'",
                            returnStatus: true
                        )
                        if (healthCheckStatus == 0) {
                            echo "‚úÖ Kubernetes Backend is healthy on attempt ${i}!"
                            healthy = true
                            break
                        } else {
                            echo "‚ùå Kubernetes Backend not yet healthy."
                            if (i < maxAttempts) {
                                sleep waitTime
                            }
                        }
                    }

                    if (!healthy) {
                        error "‚ùå Kubernetes Backend health check failed after ${maxAttempts} attempts!"
                    }
                }
            }
        }

        stage('üõ°Ô∏è DR Failover & Sync') {
            steps {
                script {
                    // --- 1. Determine Active Backend ---
                    echo "--- Determining Active Backend ---"
                    def mainBackendIsRunning = sh(
                        script: "docker ps --filter 'name=gogo-backend' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim() == 'gogo-backend'

                    def mainBackendIsHealthy = false
                    if (mainBackendIsRunning) {
                        echo "üîç Checking health of Main Backend (gogo-backend:5001)..."
                        def healthStatus = sh(script: "curl -s http://localhost:5001/health || true", returnStatus: true)
                        mainBackendIsHealthy = (healthStatus == 0)
                        if (mainBackendIsHealthy) {
                            echo "‚úÖ Main Backend (gogo-backend:5001) is running and healthy."
                        } else {
                            echo "‚ö†Ô∏è Main Backend (gogo-backend:5001) is running but unhealthy."
                        }
                    } else {
                        echo "‚ùå Main Backend container (gogo-backend) is NOT running."
                    }

                    if (mainBackendIsRunning && mainBackendIsHealthy) {
                        env.ACTIVE_BACKEND_NAME = "gogo-backend"
                        env.ACTIVE_BACKEND_PORT = "5001"
                        env.DR_BACKEND_STATUS = "Main Active (5001)"
                        echo "Stopping DR Backend (gogo-dr-backend)..."
                        sh "docker stop gogo-dr-backend || true" // Ensure DR backend is stopped
                        env.DR_DATA_SYNC_STATUS = "Not Applicable (Main Active)"
                    } else {
                        echo "üö® Main Backend is not fully active. Initiating DR Backend failover."
                        sh "docker stop gogo-backend || true" // Stop main backend, in case it's just unhealthy
                        echo "Starting DR Backend (gogo-dr-backend)..."
                        sh "docker start gogo-dr-backend" // Expect this to succeed, no || true

                        echo "üå± Running seed.py inside DR Backend container (gogo-dr-backend) to sync data from Kubernetes backend (5000)..."
                        // Assuming seed.py will connect to the source of truth (e.g., a database) or your K8s backend
                        def drBackendSeedSuccess = sh(
                            script: 'docker exec gogo-dr-backend python /app/seed.py',
                            returnStatus: true
                        )

                        if (drBackendSeedSuccess == 0) {
                            echo "‚úÖ DR Backend seed.py executed successfully."
                            env.DR_DATA_SYNC_STATUS = "DR Backend Seeded Successfully"
                            echo "üîç Checking health of DR Backend (gogo-dr-backend:5002)..."
                            def drBackendHealthy = sh(
                                script: "curl -s http://localhost:5002/health | grep -q '\"status\":\"healthy\"'",
                                returnStatus: true
                            )
                            if (drBackendHealthy == 0) {
                                echo "‚úÖ DR Backend (gogo-dr-backend:5002) is healthy."
                                env.ACTIVE_BACKEND_NAME = "gogo-dr-backend"
                                env.ACTIVE_BACKEND_PORT = "5002"
                                env.DR_BACKEND_STATUS = "DR Activated & Healthy (5002)"
                            } else {
                                echo "‚ùå DR Backend activated but Health Check Failed (5002)."
                                env.DR_BACKEND_STATUS = "DR Activated but Health Check Failed (5002)"
                                env.ACTIVE_BACKEND_NAME = "NONE" // Indicate no active backend
                                env.ACTIVE_BACKEND_PORT = "NONE"
                                error "Critical: DR Backend failed health check after activation and seeding."
                            }
                        } else {
                            echo "‚ùå DR Backend seed.py failed or could not connect to data source."
                            env.DR_DATA_SYNC_STATUS = "DR Backend Seed Failed"
                            env.DR_BACKEND_STATUS = "DR Activated but Seed Failed (5002)"
                            env.ACTIVE_BACKEND_NAME = "NONE" // Indicate no active backend
                            env.ACTIVE_BACKEND_PORT = "NONE"
                            error "Critical: DR Backend data seeding failed."
                        }
                    }

                    // --- 2. Determine Active Frontend & Connect to Active Backend ---
                    echo "--- Determining Active Frontend and Connecting to ${env.ACTIVE_BACKEND_NAME}:${env.ACTIVE_BACKEND_PORT} ---"
                    def mainFrontendIsRunning = sh(
                        script: "docker ps --filter 'name=gogo-main-frontend' --format '{{.Names}}'",
                        returnStdout: true
                    ).trim() == 'gogo-main-frontend'

                    def mainFrontendIsHealthy = false
                    if (mainFrontendIsRunning) {
                        echo "üîç Checking health of Main Frontend (gogo-main-frontend:3000)..."
                        def healthStatus = sh(script: "curl -s http://localhost:3000 || true", returnStatus: true) // Simple curl for frontend
                        mainFrontendIsHealthy = (healthStatus == 0)
                        if (mainFrontendIsHealthy) {
                            echo "‚úÖ Main Frontend (gogo-main-frontend:3000) is running and healthy."
                        } else {
                            echo "‚ö†Ô∏è Main Frontend (gogo-main-frontend:3000) is running but unhealthy."
                        }
                    } else {
                        echo "‚ùå Main Frontend container (gogo-main-frontend) is NOT running."
                    }

                    if (mainFrontendIsRunning && mainFrontendIsHealthy) {
                        env.ACTIVE_FRONTEND_NAME = "gogo-main-frontend"
                        env.ACTIVE_FRONTEND_PORT = "3000"
                        env.DR_FRONTEND_STATUS = "Main Active (3000)"
                        echo "Stopping DR Frontend (gogo-dr-frontend)..."
                        sh "docker stop gogo-dr-frontend || true" // Ensure DR frontend is stopped

                        // Reconfigure and restart main frontend to ensure it points to the determined active backend
                        echo "Reconfiguring and restarting Main Frontend (gogo-main-frontend) to connect to backend: http://localhost:${env.ACTIVE_BACKEND_PORT}"
                        sh "docker stop gogo-main-frontend || true"
                        sh """
                            docker run --rm -d \
                            --name gogo-main-frontend \
                            -p 3000:3000 \
                            -e REACT_APP_API_URL=http://localhost:${env.ACTIVE_BACKEND_PORT} \
                            your-frontend-image-name:latest # IMPORTANT: Replace with your actual frontend image name and tag
                        """
                        // Re-check health after restart
                        def recheckFrontendHealthy = sh(
                            script: "curl -s http://localhost:3000 || true",
                            returnStatus: true
                        )
                        if (recheckFrontendHealthy == 0) {
                            echo "‚úÖ Main Frontend restarted and healthy with new backend connection."
                        } else {
                            echo "‚ùå Main Frontend failed health check after restart/reconfiguration."
                            env.DR_FRONTEND_STATUS = "Main Active but Reconfig Failed"
                            error "Critical: Main Frontend failed health check after reconfiguring."
                        }

                    } else {
                        echo "üö® Main Frontend is not fully active. Initiating DR Frontend failover."
                        sh "docker stop gogo-main-frontend || true" // Stop main frontend
                        echo "Starting DR Frontend (gogo-dr-frontend)..."
                        sh """
                            docker run --rm -d \
                            --name gogo-dr-frontend \
                            -p 3002:3002 \
                            -e REACT_APP_API_URL=http://localhost:${env.ACTIVE_BACKEND_PORT} \
                            your-frontend-dr-image-name:latest # IMPORTANT: Replace with your actual DR frontend image name and tag
                        """
                        // Assuming you have a separate DR frontend image or same image deployed differently
                        // If it's the same image, use 'your-frontend-image-name:latest'

                        echo "üîç Checking health of DR Frontend (gogo-dr-frontend:3002)..."
                        def drFrontendHealthy = sh(
                            script: "curl -s http://localhost:3002 || true",
                            returnStatus: true
                        )
                        if (drFrontendHealthy == 0) {
                            echo "‚úÖ DR Frontend (gogo-dr-frontend:3002) is healthy."
                            env.ACTIVE_FRONTEND_NAME = "gogo-dr-frontend"
                            env.ACTIVE_FRONTEND_PORT = "3002"
                            env.DR_FRONTEND_STATUS = "DR Activated & Healthy (3002)"
                        } else {
                            echo "‚ùå DR Frontend activated but Health Check Failed (3002)."
                            env.DR_FRONTEND_STATUS = "DR Activated but Health Check Failed (3002)"
                            env.ACTIVE_FRONTEND_NAME = "NONE" // Indicate no active frontend
                            env.ACTIVE_FRONTEND_PORT = "NONE"
                            error "Critical: DR Frontend failed health check after activation."
                        }
                    }

                    // --- 3. Determine Overall DR Test Result ---
                    // The pipeline will have errored out earlier if no active frontend or backend was found
                    env.DR_TEST_RESULT = "SUCCESS" // If we reached here, something should be active and healthy
                }
            }
        }

        stage('üìä Generate DR Readiness Reports') {
            steps {
                script {
                    echo "--- DR Readiness Report ---"
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "Build URL: ${env.BUILD_URL}"
                    echo "Timestamp: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
                    echo "---------------------------"
                    echo "DR Test Result: **${env.DR_TEST_RESULT}**"
                    echo "Active Frontend: ${env.ACTIVE_FRONTEND_NAME} (Port: ${env.ACTIVE_FRONTEND_PORT}, Status: ${env.DR_FRONTEND_STATUS})"
                    echo "Active Backend: ${env.ACTIVE_BACKEND_NAME} (Port: ${env.ACTIVE_BACKEND_PORT}, Status: ${env.DR_BACKEND_STATUS})"
                    echo "DR Data Sync Status: ${env.DR_DATA_SYNC_STATUS}"
                    echo "---------------------------"

                    // You can save this to a file as a build artifact
                    def reportContent = """
                        DR Readiness Report
                        -------------------
                        Build Number: ${env.BUILD_NUMBER}
                        Build URL: ${env.BUILD_URL}
                        Timestamp: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
                        -------------------
                        DR Test Result: ${env.DR_TEST_RESULT}
                        Active Frontend: ${env.ACTIVE_FRONTEND_NAME} (Port: ${env.ACTIVE_FRONTEND_PORT}, Status: ${env.DR_FRONTEND_STATUS})
                        Active Backend: ${env.ACTIVE_BACKEND_NAME} (Port: ${env.ACTIVE_BACKEND_PORT}, Status: ${env.DR_BACKEND_STATUS})
                        DR Data Sync Status: ${env.DR_DATA_SYNC_STATUS}
                        -------------------
                    """.stripIndent()

                    writeFile file: 'dr-readiness-report.txt', text: reportContent
                    archiveArtifacts artifacts: 'dr-readiness-report.txt', fingerprint: true

                    // Send a richer Slack notification with the report summary
                    withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                        def slackMessage = ""
                        if (env.DR_TEST_RESULT == "SUCCESS") {
                            slackMessage = "‚úÖ *DR Readiness Test Passed!*\\nBuild: <${env.BUILD_URL}|#${env.BUILD_NUMBER}>\\nActive Frontend: *${env.ACTIVE_FRONTEND_NAME}* (${env.ACTIVE_FRONTEND_PORT})\\nActive Backend: *${env.ACTIVE_BACKEND_NAME}* (${env.ACTIVE_BACKEND_PORT})\\nData Sync: ${env.DR_DATA_SYNC_STATUS}"
                        } else {
                            slackMessage = "‚ùå *DR Readiness Test FAILED!*\\nBuild: <${env.BUILD_URL}|#${env.BUILD_NUMBER}>\\nFrontend Status: ${env.DR_FRONTEND_STATUS}\\nBackend Status: ${env.DR_BACKEND_STATUS}\\nData Sync: ${env.DR_DATA_SYNC_STATUS}\\nCheck logs for details."
                        }

                        sh """
                            curl -X POST -H 'Content-type: application/json' \
                            --data '{"text": "${slackMessage}"}' $SLACK_WEBHOOK
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Backend image pushed and deployment updated."
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚úÖ *Backend* CI/CD succeeded ‚Äî *${TAG}* deployed & DR check passed!"}' $SLACK_WEBHOOK
                """
            }
        }

        aborted {
            echo "‚èπÔ∏è Pipeline aborted (no backend changes)"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ö†Ô∏è *Backend* pipeline aborted ‚Äî no changes detected."}' $SLACK_WEBHOOK
                """
            }
        }

        failure {
            echo "‚ùå Pipeline failed"
            withCredentials([string(credentialsId: "${SLACK_CREDENTIAL_ID}", variable: 'SLACK_WEBHOOK')]) {
                sh """
                    curl -X POST -H 'Content-type: application/json' \
                    --data '{"text": "‚ùå *Backend* pipeline failed. Check Jenkins logs."}' $SLACK_WEBHOOK
                """
            }
        }
    }
}